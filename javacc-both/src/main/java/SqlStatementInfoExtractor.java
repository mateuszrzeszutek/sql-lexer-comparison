/* Generated By:JavaCC: Do not edit this line. SqlStatementInfoExtractor.java */

import java.io.StringReader;

public class SqlStatementInfoExtractor implements SqlStatementInfoExtractorConstants {
  public static SqlStatementInfo extract(String statement) throws ParseException {
    if (statement == null) {
      return new SqlStatementInfo(null, null, null);
    }
    statement = statement.trim();
    SqlStatementInfoExtractor parser = new SqlStatementInfoExtractor(new StringReader(statement));
    parser.Input();
    return parser.operation.getResult(statement);
  }

  private Operation operation = NoOp.INSTANCE;

  private int parenLevel = 0;
  private boolean insideComment = false;

  private void setOperation(Operation operation) {
    if (this.operation == NoOp.INSTANCE) {
      this.operation = operation;
    }
  }

  private static abstract class Operation {
    String mainTable = null;

    /** @return true if all statement info is gathered */
    boolean handleFrom() {
      return false;
    }

    /** @return true if all statement info is gathered */
    boolean handleInto() {
      return false;
    }

    /** @return true if all statement info is gathered */
    boolean handleJoin() {
      return false;
    }

    /** @return true if all statement info is gathered */
    boolean handleIdentifier(String identifier) {
      return false;
    }

    /** @return true if all statement info is gathered */
    boolean handleComma() {
      return false;
    }

    SqlStatementInfo getResult(String fullStatement) {
      return new SqlStatementInfo(fullStatement, getClass().getSimpleName().toUpperCase(), mainTable);
    }
  }

  private static class NoOp extends Operation {
    static final Operation INSTANCE = new NoOp();

    SqlStatementInfo getResult(String fullStatement) {
      return new SqlStatementInfo(fullStatement, null, null);
    }
  }

  private class Select extends Operation {
    // you can reference a table in the FROM clause in one of the following ways:
    //   table
    //   table t
    //   table as t
    // in other words, you need max 3 identifiers to reference a table
    private static final int FROM_TABLE_REF_MAX_IDENTIFIERS = 3;

    boolean expectingTableName = false;
    boolean mainTableSetAlready = false;
    int identifiersAfterMainFromClause = 0;

    boolean handleFrom() {
      if (parenLevel == 0) {
        // main query FROM clause
        expectingTableName = true;
        return false;
      } else {
        // subquery in WITH or SELECT clause, before main FROM clause; skipping
        mainTable = null;
        return true;
      }
    }

    boolean handleJoin() {
      // for SELECT statements with joined tables there's no main table
      mainTable = null;
      return true;
    }

    boolean handleIdentifier(String identifier) {
      if (identifiersAfterMainFromClause > 0) {
        ++identifiersAfterMainFromClause;
      }

      if (!expectingTableName) {
        return false;
      }

      // SELECT FROM (subquery) case
      if (parenLevel != 0) {
        mainTable = null;
        return true;
      }

      // whenever >1 table is used there is no main table (e.g. unions)
      if (mainTableSetAlready) {
        mainTable = null;
        return true;
      }

      mainTable = identifier;
      mainTableSetAlready = true;
      expectingTableName = false;
      // start counting identifiers after encountering main from clause
      identifiersAfterMainFromClause = 1;

      // continue scanning the query, there may be more than one table (e.g. joins)
      return false;
    }

    boolean handleComma() {
      // comma was encountered in the FROM clause, i.e. implicit join
      // (if less than 3 identifiers have appeared before first comma then it means that it's a table list;
      // any other list that can appear later needs at least 4 idents)
      if (identifiersAfterMainFromClause > 0
          && identifiersAfterMainFromClause <= FROM_TABLE_REF_MAX_IDENTIFIERS) {
        mainTable = null;
        return true;
      }
      return false;
    }
  }

  private static class Insert extends Operation {
    boolean expectingTableName = false;

    boolean handleInto() {
      expectingTableName = true;
      return false;
    }

    boolean handleIdentifier(String identifier) {
      if (!expectingTableName) {
        return false;
      }

      mainTable = identifier;
      return true;
    }
  }

  private static class Delete extends Operation {
    boolean expectingTableName = false;

    boolean handleFrom() {
      expectingTableName = true;
      return false;
    }

    boolean handleIdentifier(String identifier) {
      if (!expectingTableName) {
        return false;
      }

      mainTable = identifier;
      return true;
    }
  }

  private static class Update extends Operation {
    boolean handleIdentifier(String identifier) {
      mainTable = identifier;
      return true;
    }
  }

  private static class Merge extends Operation {
    boolean handleIdentifier(String identifier) {
      mainTable = identifier;
      return true;
    }
  }

  final public void Input() throws ParseException {
  Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Select:
      case Insert:
      case Delete:
      case Update:
      case Merge:
      case From:
      case Into:
      case Join:
      case Comma:
      case OpenParen:
      case CloseParen:
      case OpenComment:
      case CloseComment:
      case Identifier:
      case Whitespace:
      case Other:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Select:
        jj_consume_token(Select);
      if (!insideComment) {
        setOperation(new Select());
      }
        break;
      case Insert:
        jj_consume_token(Insert);
      if (!insideComment) {
        setOperation(new Insert());
      }
        break;
      case Delete:
        jj_consume_token(Delete);
      if (!insideComment) {
        setOperation(new Delete());
      }
        break;
      case Update:
        jj_consume_token(Update);
      if (!insideComment) {
        setOperation(new Update());
      }
        break;
      case Merge:
        jj_consume_token(Merge);
      if (!insideComment) {
        setOperation(new Merge());
      }
        break;
      case From:
        jj_consume_token(From);
      if (!insideComment) {
        boolean done = operation.handleFrom();
        if (done) {
          {if (true) return;}
        }
      }
        break;
      case Into:
        jj_consume_token(Into);
      if (!insideComment) {
        boolean done = operation.handleInto();
        if (done) {
          {if (true) return;}
        }
      }
        break;
      case Join:
        jj_consume_token(Join);
      if (!insideComment) {
        boolean done = operation.handleJoin();
        if (done) {
          {if (true) return;}
        }
      }
        break;
      case Identifier:
        t = jj_consume_token(Identifier);
      if (!insideComment) {
        boolean done = operation.handleIdentifier(t.image);
        if (done) {
          {if (true) return;}
        }
      }
        break;
      case Comma:
        jj_consume_token(Comma);
      if (!insideComment) {
        boolean done = operation.handleComma();
        if (done) {
          {if (true) return;}
        }
      }
        break;
      case OpenParen:
        jj_consume_token(OpenParen);
      if (!insideComment) {
        parenLevel += 1;
      }
        break;
      case CloseParen:
        jj_consume_token(CloseParen);
      if (!insideComment) {
        parenLevel -= 1;
      }
        break;
      case OpenComment:
        jj_consume_token(OpenComment);
      insideComment = true;
        break;
      case CloseComment:
        jj_consume_token(CloseComment);
      insideComment = false;
        break;
      case Whitespace:
        jj_consume_token(Whitespace);
        break;
      case Other:
        jj_consume_token(Other);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  /** Generated Token Manager. */
  public SqlStatementInfoExtractorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x37ffe,0x37ffe,};
   }

  /** Constructor with InputStream. */
  public SqlStatementInfoExtractor(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SqlStatementInfoExtractor(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SqlStatementInfoExtractorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SqlStatementInfoExtractor(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SqlStatementInfoExtractorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SqlStatementInfoExtractor(SqlStatementInfoExtractorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SqlStatementInfoExtractorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[18];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
